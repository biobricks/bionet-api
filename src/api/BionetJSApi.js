"use strict;"
// note: autogenerated from genRPCModule.js
module.exports = class BionetApi {
	constructor(_bionetClient) {
		this.bionetClient = _bionetClient
	}
	requestSendMTA(requestID, description, cb) {
		const rpcRequest = {
			"method": "requestSendMTA",
			"args": [requestID, description]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	requestBuyShippingLabel(requestID, cb) {
		const rpcRequest = {
			"method": "requestBuyShippingLabel",
			"args": [requestID]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	requestPrintShippingLabel(requestID, cb) {
		const rpcRequest = {
			"method": "requestPrintShippingLabel",
			"args": [requestID]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	printShippingLabel(address, cb) {
		const rpcRequest = {
			"method": "printShippingLabel",
			"args": [address]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getWorkbench(cb) {
		const rpcRequest = {
			"method": "getWorkbench",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	workbenchTree(cb) {
		const rpcRequest = {
			"method": "workbenchTree",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getFavLocations(cb) {
		const rpcRequest = {
			"method": "getFavLocations",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	favLocationsTree(cb) {
		const rpcRequest = {
			"method": "favLocationsTree",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	saveFavLocation(material, imageData, doPrint, cb) {
		const rpcRequest = {
			"method": "saveFavLocation",
			"args": [material, imageData, doPrint]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getChildren(id, cb) {
		const rpcRequest = {
			"method": "getChildren",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	saveInWorkbench(material, imageData, doPrint, cb) {
		const rpcRequest = {
			"method": "saveInWorkbench",
			"args": [material, imageData, doPrint]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getID(cb) {
		const rpcRequest = {
			"method": "getID",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	clearDeleted(cb) {
		const rpcRequest = {
			"method": "clearDeleted",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	undelete(key, cb) {
		const rpcRequest = {
			"method": "undelete",
			"args": [key]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	delPhysical(id, cb) {
		const rpcRequest = {
			"method": "delPhysical",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	delVirtual(id, cb) {
		const rpcRequest = {
			"method": "delVirtual",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	physicalAutocomplete(query, cb) {
		const rpcRequest = {
			"method": "physicalAutocomplete",
			"args": [query]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	addToCart(physical_id, name, cb) {
		const rpcRequest = {
			"method": "addToCart",
			"args": [physical_id, name]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	delFromCart(physical_id, cb) {
		const rpcRequest = {
			"method": "delFromCart",
			"args": [physical_id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	emptyCart(cb) {
		const rpcRequest = {
			"method": "emptyCart",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getType(name, cb) {
		const rpcRequest = {
			"method": "getType",
			"args": [name]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	createAutocomplete(type, query, cb) {
		const rpcRequest = {
			"method": "createAutocomplete",
			"args": [type, query]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	saveVirtual(material, cb) {
		const rpcRequest = {
			"method": "saveVirtual",
			"args": [material]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	savePhysical(material, imageData, doPrint, cb) {
		const rpcRequest = {
			"method": "savePhysical",
			"args": [material, imageData, doPrint]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	elasticSearch(query, cb) {
		const rpcRequest = {
			"method": "elasticSearch",
			"args": [query]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	inventoryTree(cb) {
		const rpcRequest = {
			"method": "inventoryTree",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getParentPath(id, cb) {
		const rpcRequest = {
			"method": "getParentPath",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getLocationPath(id, cb) {
		const rpcRequest = {
			"method": "getLocationPath",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getPath(id, cb) {
		const rpcRequest = {
			"method": "getPath",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getImmediateChildren(path, key, cb) {
		const rpcRequest = {
			"method": "getImmediateChildren",
			"args": [path, key]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getLocationPathChildren(id, cb, cb2) {
		const rpcRequest = {
			"method": "getLocationPathChildren",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getVirtualBy(field, value, cb) {
		const rpcRequest = {
			"method": "getVirtualBy",
			"args": [field, value]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getBy(field, value, cb) {
		const rpcRequest = {
			"method": "getBy",
			"args": [field, value]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	search(query, cb) {
		const rpcRequest = {
			"method": "search",
			"args": [query]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getUser(id, cb) {
		const rpcRequest = {
			"method": "getUser",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	delUser(id, cb) {
		const rpcRequest = {
			"method": "delUser",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	saveUser(id, userData, cb) {
		const rpcRequest = {
			"method": "saveUser",
			"args": [id, userData]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getPeers(cb) {
		const rpcRequest = {
			"method": "getPeers",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	peerSearchOld(query, cb) {
		const rpcRequest = {
			"method": "peerSearchOld",
			"args": [query]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	peerBlast(query, cb) {
		const rpcRequest = {
			"method": "peerBlast",
			"args": [query]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	emptyRequestTrash(cb) {
		const rpcRequest = {
			"method": "emptyRequestTrash",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	changeRequestTrashed(id, trashed, cb) {
		const rpcRequest = {
			"method": "changeRequestTrashed",
			"args": [id, trashed]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	changeRequestStatus(id, status, cb) {
		const rpcRequest = {
			"method": "changeRequestStatus",
			"args": [id, status]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	requestMaterial(peerID, id, cb) {
		const rpcRequest = {
			"method": "requestMaterial",
			"args": [peerID, id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	freegenesCreatePlate(parent_id, name, cb) {
		const rpcRequest = {
			"method": "freegenesCreatePlate",
			"args": [parent_id, name]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	freegenesCreatePart(virtual_id, parent_id, name, cb) {
		const rpcRequest = {
			"method": "freegenesCreatePart",
			"args": [virtual_id, parent_id, name]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getPandadocStatus(cb) {
		const rpcRequest = {
			"method": "getPandadocStatus",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	foo_user(cb) {
		const rpcRequest = {
			"method": "foo_user",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	testStream(cb) {
		const rpcRequest = {
			"method": "testStream",
			"args": []
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	listDeleted(cb) {
		const rpcRequest = {
			"method": "listDeleted",
			"args": []
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	cartStream(cb) {
		const rpcRequest = {
			"method": "cartStream",
			"args": []
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	clearRequests(cb) {
		const rpcRequest = {
			"method": "clearRequests",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getRequests(cb) {
		const rpcRequest = {
			"method": "getRequests",
			"args": []
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	recentChanges(cb) {
		const rpcRequest = {
			"method": "recentChanges",
			"args": []
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getUsers(cb) {
		const rpcRequest = {
			"method": "getUsers",
			"args": []
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getInventoryRoot(cb) {
		const rpcRequest = {
			"method": "getInventoryRoot",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getPeerInfo(cb) {
		const rpcRequest = {
			"method": "getPeerInfo",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getStatus(cb) {
		const rpcRequest = {
			"method": "getStatus",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	foo(cb) {
		const rpcRequest = {
			"method": "foo",
			"args": []
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	checkMasterPassword(password, cb) {
		const rpcRequest = {
			"method": "checkMasterPassword",
			"args": [password]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	createUser(username, email, password, opts, cb) {
		const rpcRequest = {
			"method": "createUser",
			"args": [username, email, password, opts]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getRequestStatus(pandadocID, cb) {
		const rpcRequest = {
			"method": "getRequestStatus",
			"args": [pandadocID]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getRequest(key, cb) {
		const rpcRequest = {
			"method": "getRequest",
			"args": [key]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	createRequest(virtual_id, data, cb) {
		const rpcRequest = {
			"method": "createRequest",
			"args": [virtual_id, data]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	getByHumanID(humanID, cb) {
		const rpcRequest = {
			"method": "getByHumanID",
			"args": [humanID]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	verifyUser(code, cb) {
		const rpcRequest = {
			"method": "verifyUser",
			"args": [code]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	requestPasswordReset(emailOrName, cb) {
		const rpcRequest = {
			"method": "requestPasswordReset",
			"args": [emailOrName]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	checkPasswordResetCode(resetCode, cb) {
		const rpcRequest = {
			"method": "checkPasswordResetCode",
			"args": [resetCode]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	completePasswordReset(resetCode, password, cb) {
		const rpcRequest = {
			"method": "completePasswordReset",
			"args": [resetCode, password]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	blast(query, opts, cb) {
		const rpcRequest = {
			"method": "blast",
			"args": [query, opts]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	get(id, cb) {
		const rpcRequest = {
			"method": "get",
			"args": [id]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	requestLocalMaterial(id, requesterEmail, physicalAddress, name, org, msg, cb) {
		const rpcRequest = {
			"method": "requestLocalMaterial",
			"args": [id, requesterEmail, physicalAddress, name, org, msg]
		}
		this.bionetClient.rpc(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	searchVirtuals(query, opts, cb) {
		const rpcRequest = {
			"method": "searchVirtuals",
			"args": [query, opts]
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	searchPhysicals(query, opts, cb) {
		const rpcRequest = {
			"method": "searchPhysicals",
			"args": [query, opts]
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	blastStream(query, opts, cb) {
		const rpcRequest = {
			"method": "blastStream",
			"args": [query, opts]
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
	peerSearch(methodName, query, opts, cb) {
		const rpcRequest = {
			"method": "peerSearch",
			"args": [methodName, query, opts]
		}
		var stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {
			cb(err, result)
		})
	}
}
