"use strict";
const rpcLibFn = require('./rpcFunctionData')
const rpcFnSpec = require('./rpcFunctionSpec')

function genFNSpec() {
    const rpcLibOut = {}

    var rpcLib = rpcLibFn.getUserlib()
    for (var rpcName in rpcLib) {
        if (rpcLib.hasOwnProperty(rpcName)) {
            var rpcFn = rpcLib[rpcName];
            var rpcOut = {
                "name": rpcName,
                "description": "d",
                "public": false,
                "requestArgs": rpcFn,
                "responseArgs": ["err"],
                "returns": ""
            }
            rpcLibOut[rpcName] = rpcOut
        }
    }
    rpcLib = rpcLibFn.getPubliclib()
    for (var rpcName in rpcLib) {
        if (rpcLib.hasOwnProperty(rpcName)) {
            var rpcFn = rpcLib[rpcName];
            var rpcOut = {
                "name": rpcName,
                "description": "",
                "public": true,
                "requestArgs": rpcFn,
                "responseArgs": ["err"],
                "returns": ""
            }
            rpcLibOut[rpcName] = rpcOut
        }
    }
    var streamFn = rpcLibFn.getStreamFn()
    streamFn.forEach(function (fnName) {
        if (rpcLibOut[fnName]) rpcLibOut[fnName].stream=true
    })
    console.log("const rpcLib = "+JSON.stringify(rpcLibOut, null, 2))
    console.log("module.exports.getlib = function getlib() {")
    console.log("    return rpcLib")
    console.log("}")
}

function genArgStr(requestArgs) {
    var argStr = ""
    if (requestArgs.length > 0) {
        requestArgs.forEach(function (arg) {
            argStr += arg + ","
        })
    }
    argStr = argStr.substr(0, argStr.length - 1)
    return argStr
}

function genJSApiMethod(fnSpec) {
    var argStr = ""
    var rpcArgs = genArgStr(fnSpec.requestArgs)
    if (fnSpec.requestArgs.length > 0) {
        argStr = rpcArgs + ",cb"
    } else {
        argStr = "cb"
    }
    console.log(fnSpec.name + "(" + argStr + ") {")
    console.log("\tconst rpcRequest = {")
    console.log("\t\t\"method\":\"" + fnSpec.name + "\",")
    console.log("\t\t\"args\":[" + rpcArgs + "]")
    console.log("\t}")
    if (fnSpec.stream) {
        console.log("\tvar stream = this.bionetClient.rpcStream(rpcRequest, function (err, result) {")
    } else {
        console.log("\tthis.bionetClient.rpc(rpcRequest, function (err, result) {")
    }
    console.log("\t\tcb(err,result)")
    console.log("\t})")
    console.log("}")
}

function genJSApi() {
    const rpcLib = rpcFnSpec.getlib()
    console.log("\"use strict;\"")
    console.log("// note: autogenerated from genRPCModule.js")
    console.log("module.exports = class BionetApi {")
    console.log("constructor(_bionetClient) {")
    console.log("\tthis.bionetClient = _bionetClient")
    console.log("}")

    for (var rpcName in rpcLib) {
        if (rpcLib.hasOwnProperty(rpcName)) {
            var rpcFn = rpcLib[rpcName];
            genJSApiMethod(rpcFn)
        }
    }
    console.log("}")
}

function genPYApiMethod(fnSpec) {
    var argStr = ""
    var rpcArgs = genArgStr(fnSpec.requestArgs)
    if (fnSpec.requestArgs.length > 0) {
        argStr = rpcArgs + ",cb"
    } else {
        argStr = "cb"
    }
    console.log("\tdef " + fnSpec.name + "(self," + argStr + "):")
    console.log("\t\trpcRequest = {")
    console.log("\t\t\t\"method\":\"" + fnSpec.name + "\",")
    console.log("\t\t\t\"args\":[" + rpcArgs + "]")
    console.log("\t\t}")
    console.log("\t\tself.bionetClient.rpc(rpcRequest, cb)")
}

function genPYAsyncApiMethod(fnSpec) {
    var argStr = ""
    var rpcArgs = genArgStr(fnSpec.requestArgs)
    if (fnSpec.requestArgs.length > 0) {
        argStr = rpcArgs + ",cb"
    } else {
        argStr = "cb"
    }
    console.log("\tasync def " + fnSpec.name + "(self," + argStr + "):")
    console.log("\t\trpcRequest = {")
    console.log("\t\t\t\"method\":\"" + fnSpec.name + "\",")
    console.log("\t\t\t\"args\":[" + rpcArgs + "]")
    console.log("\t\t}")
    console.log("\t\tawait self.bionetClient.arpc(rpcRequest, cb)")
}
/*
#note: autogenerated from genRPCModule.js
import asyncio
import websockets
from io import StringIO
import json
class BionetApi():
	async def arpc(self, request, consumer):
		io = StringIO()
		try:
			json.dump(request, io)
		except:
			print("arpc: error in json.dump")

		await self.websocket.send(io.getvalue())
		message = await self.websocket.recv()

		jsonMessage = json.loads(message)
		await consumer(jsonMessage)
	def connect(self, wsUrl, consumer):
		async def runRpc():
			async with websockets.connect(wsUrl, subprotocols=["bionet-protocol"]) as websocket:
				self.websocket = websocket
				await consumer()
		loop = asyncio.get_event_loop()
		loop.run_until_complete(runRpc())
*/
function genPYApi() {
    const rpcLib = rpcFnSpec.getlib()
    console.log("#note: autogenerated from genRPCModule.js")
    console.log("class BionetApi():")
    console.log("\tdef __init__(self,bionetClient):")
    console.log("\t\tself.bionetClient = bionetClient")
    for (var rpcName in rpcLib) {
        if (rpcLib.hasOwnProperty(rpcName)) {
            var rpcFn = rpcLib[rpcName];
            genPYAsyncApiMethod(rpcFn)
        }
    }
}
//genFNSpec()
//genPYApi()
//genJSApi()
genPYApi()